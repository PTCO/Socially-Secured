@using System.Text.Json;
@inject NavigationManager NavigationManager
@inject  Model Model
@inject UserService UserService
@rendermode InteractiveAuto
@page "/Login/ChangeUsername"
@layout Layout.Login

<article class="flex flex-column items-center w-[424px] @Class">
    <h3 class="montserrat-semibold !text-[36px] mb-0 text-center">Change Username</h3>
    <img src="images/Divider-large.png" class="mt-[32px]" alt="">
    <Form 
        Inputs="@inputs"
        Buttons="@buttons"
        FormsClass="flex flex-column items-center text-center w-[420px] ml-auto"
        LabelsClass="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px]"
        InputsClass="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#D9D9D9] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none"
        HandleSubmit="HandleSubmit"
        ButtonTitle="Update"
        ButtonClass="bg-[#92BA92] w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-white"
        ButtonContainerClass="flex flex-row justify-between w-full"
        ChangeUI="@Model.SwitchUI"
        TakenUsernames="@(new List<string> {"Brannd101505"})"
    />
    <FormErrors Class="@(Model.uI.UI_Errors + " !mt-[88px] xl:!mt-[35px]")" Errors="Model.errorMessages.ToArray()" />
    <div class="flex items-center !mt-[88px] xl:!mt-[50px] @(changed ? "" : "hidden")">
        <h4 class="hind-madurai-semibold !text-[32px] mb-0 mr-[20px]">Username Changed</h4>
        <img src="images/CheckMark-Icon.png" alt="">
    </div>
</article>

@code {
    [Parameter]
    public string Class { get; set;} = ""; // Placeholder for password check status
    public bool changed { get; set; } = false; // Placeholder for email check status
    public List<Form.Inputs> inputs { get; set; } = new List<Form.Inputs>{
        new Form.Inputs { Name = "NewUsername", Value = "", Type = "password", UniqueStyles = "", LabelUniqueStyles = "!mt-[30px]", Label = "New Username", OnInput="CheckUsername", isError = false },
        new Form.Inputs { Name = "ConfirmUsername", Value = "", Type = "password", UniqueStyles = "", LabelUniqueStyles = "", Label = "Confirm Username", OnInput="CheckIsEmpty", isError = false  },
    };    
    [Parameter]
    public EventCallback<string> OnClick { get; set; } // Placeholder for password check status
    public List<Form.Buttons> buttons = new List<Form.Buttons>() {
        new Form.Buttons() { Title = "Back", UniqueStyles = "!bg-[#476F95]", Type="button" },
        new Form.Buttons() { Title = "Update", UniqueStyles = "cursor-not-allowed opacity-50", Type="submit", isDisabled = false }
    };

    protected override void OnInitialized()
    {
        Model.errorMessages.Clear();
        buttons[0].OnClick = EventCallback.Factory.Create(this, () => { Model.SwitchUI("None"); NavigationManager.NavigateTo("/Login/SelectOption"); StateHasChanged(); });
        buttons[1].OnClick = EventCallback.Factory.Create(this, () => { StateHasChanged(); });
    }

    public async Task HandleSubmit(Model Model)
    {
        if(Model.GetProperty("NewUsername") != Model.GetProperty("ConfirmUsername"))
        {
            if(!Model.errorMessages.Contains("Usernames do not match."))
                Model.errorMessages.Add("Usernames do not match.");
                Model.SwitchUI("Errors");
                return;
        }
        else
        {
            Model.SwitchUI("None");
            Model.errorMessages.Clear();
            
        }

        if(Model.errorMessages.Count == 0 && !Model.errorMessages.Contains(""))
        {
            UserService.CurrentUser.username = Model.GetProperty("NewUsername");
            changed = true;
            Query.PostQueryAsync("https://jsonplaceholder.typicode.com/posts", JsonSerializer.Serialize(UserService.CurrentUser)); // Simulate a successful update            
            await Task.Delay(2000); // Simulate a delay for the change
            Model.SwitchUI("None");
            NavigationManager.NavigateTo("/Login/SelectOption");
        }
        else
        {
            buttons[1].isDisabled = true; // Disable the button after submission
            Model.SwitchUI("Errors");
        }
        StateHasChanged();
    }
}