@inject NavigationManager NavigationManager
@rendermode InteractiveAuto
@page "/Login/EmailVerification"
@layout Layout.Login
@inject Model Model
@inject Query Query
@inject UserService UserService

<article class="flex flex-column items-center w-[424px] @Class">
    <Form 
        Inputs="@inputs"
        Buttons="@buttons"
        FormsClass="flex flex-column items-center text-center w-[420px] ml-auto"
        LabelsClass="montserrat-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px]"
        InputsClass="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#476F95] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none"
        FormName="LoginForm"
        HandleSubmit="HandleSubmit"
        ButtonTitle="Verify"
        ButtonClass="bg-[#F1DDBF] w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-black"
        ButtonContainerClass="flex flex-row justify-between w-full" 
        ChangeUI="@Model.SwitchUI"
    />
    <div class="flex flex-column items-center !mt-[70px] @(!verified ? "hidden" : "")">
        <h4 class="!text-[32px] hind-madurai-semibold  !mb-[30px]">Email verified</h4>
        <img src="images/CheckMark-Icon.png" class="w-[47px] h-[45px]" alt="">
    </div>
    <FormErrors Class="@(Model.uI.UI_Errors + " !mt-[60px]")" Errors="Model.errorMessages.ToArray()" />
</article>


@code {
    [Parameter]
    public string Class { get; set;} = ""; // Placeholder for email check status
    [Parameter]
    public EventCallback<string> OnClick { get; set; } // Placeholder for email check status

    public List<Form.Inputs> inputs = new List<Form.Inputs>(){ 
        new Form.Inputs(){ Name = "Email", Type = "email", Value = "", Placeholder="", UniqueStyles = "", LabelUniqueStyles="!mt-0", Label="Enter email associated with account", OnInput="CheckEmail", isError=false }
    };

    public List<Form.Buttons> buttons = new List<Form.Buttons>() {
        new Form.Buttons() { Title = "Back", UniqueStyles = "!bg-[#D9D9D9]", Type="button" },
        new Form.Buttons() { Title = "Verify", UniqueStyles = "cursor-not-allowed opacity-50", Type="submit", isDisabled = false }
    };

    public bool verified { get; set; } = false; // Placeholder for email check status

    protected override void OnInitialized()
    {
        Model.errorMessages.Clear();
        Model.SwitchUI("None");
        Model.AddProperty("Email", Model.GetProperty("Email") ?? "");
        buttons[0].OnClick = EventCallback.Factory.Create(this, () => { NavigationManager.NavigateTo("/Login"); StateHasChanged(); });
        buttons[1].OnClick = EventCallback.Factory.Create(this, () => { StateHasChanged(); });
    }

    public async Task HandleSubmit(Model Model)
    {
        var query = Query.GetQuery("https://jsonplaceholder.typicode.com/users");
        var emailList = System.Text.Json.JsonSerializer.Deserialize<List<User>>(query);
        foreach (var value in emailList)
        {
            if (value.email.Equals(Model.GetProperty("Email")))
            {
                verified = true; // Simulate successful verification
                await Task.Delay(3000); // Simulate a delay for verification
                UserService.CurrentUser = new User
                {
                    username = value.username,
                    email = value.email,
                    password = value.password
                };
                NavigationManager.NavigateTo("/Login/SelectOption");
                Model.errorMessages.Clear();
                break;
            }
            else
            {
                Model.errorMessages.Add("Email not found. Please try again.");
                Model.SwitchUI("Errors");
                await Task.Delay(3000); // Simulate a delay for error display
                Model.errorMessages.Clear();
                Model.SwitchUI("None");
                break;
            }
        }
        StateHasChanged();
    }

}