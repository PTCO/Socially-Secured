@inject NavigationManager NavigationManager
@rendermode InteractiveAuto
@page "/Login/EmailVerification"
@layout Layout.Login
@inject Model Model
@inject Query Query
@inject UserService UserService
@using System.ComponentModel.DataAnnotations;

<article class="flex flex-column items-center w-[424px] @Class">
    <EditForm Model="@EmailForm" OnSubmit="HandleSubmit" class="flex flex-column items-center text-center w-[420px] ml-auto">
        <DataAnnotationsValidator />

        <label class="montserrat-semibold text-[30px] text-[#000]  mb-[25px] xl:!mb-[15px]">Enter email associated with account</label>
        <InputText @bind-Value="EmailForm.Email" class="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !mt-0 !rounded-[15px] bg-[#476F95] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none" />

        <div class="flex flex-row justify-between w-full">
            <button class=" w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-black bg-[#D9D9D9]" @onclick="@(() => NavigationManager.NavigateTo("/Login"))">Back</button>
            <button type="submit" class="bg-[#F1DDBF] w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-black">Verify</button>
        </div>
    </EditForm>
    <div class="flex flex-column items-center !mt-[70px] @(!verified ? "hidden" : "")">
        <h4 class="!text-[32px] hind-madurai-semibold  !mb-[30px]">Email verified</h4>
        <img src="images/CheckMark-Icon.png" class="w-[47px] h-[45px]" alt="">
    </div>
    <FormErrors Class="@(Model.uI.UI_Errors + " !mt-[60px]")" Errors="Model.errorMessages.ToArray()" />
</article>


@code {
    [Parameter]
    public string Class { get; set; } = ""; // Placeholder for email verification status
    public class EmailVerificationModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }
    }

    private EditContext editContext;
    public EmailVerificationModel EmailForm { get; set; }

    public bool verified { get; set; } = false; // Placeholder for email check status

    protected override void OnInitialized()
    {
        EmailForm = new EmailVerificationModel(); // Ensure it's initialized
        editContext = new EditContext(EmailForm);
        Model.errorMessages.Clear();
        Model.SwitchUI("None");

    }

    public async Task HandleSubmit()
    {
        editContext.Validate();
        foreach (var message in editContext.GetValidationMessages()){
            if(message == "Invalid email address." || message == "Email is required.")
            {
                Model.errorMessages.Add(message);
            }
        }

        if(Model.errorMessages.Count > 0)
        {
            return;
        }
        @* var query = Query.GetQuery("https://jsonplaceholder.typicode.com/users");
        var emailList = System.Text.Json.JsonSerializer.Deserialize<List<User>>(query);
        foreach (var user in emailList)
        {
            if (user.email.Equals(EmailForm.Email))
            {
                verified = true; // Simulate successful verification
                await Task.Delay(3000); // Simulate a delay for verification
                UserService.SetUser(System.Text.Json.JsonSerializer.Serialize(user));
                NavigationManager.NavigateTo("/Login/SelectOption");
                Model.errorMessages.Clear();
                break;
            }
            else
            {
                Model.errorMessages.Add("Email not found. Please try again.");
                Model.SwitchUI("Errors");
                await Task.Delay(3000); // Simulate a delay for error display
                Model.errorMessages.Clear();
                break;
            }
        } *@
        StateHasChanged();
    }

}