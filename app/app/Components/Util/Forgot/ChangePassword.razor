@using System.Text.Json;
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject Model Model
@inject UserService UserService
@rendermode InteractiveAuto
@page "/Login/ChangePassword"
@layout Layout.Login

<article class="flex flex-column items-center w-[424px] @Class">
    <h3 class="montserrat-semibold !text-[36px] mb-0 text-center">Change Password</h3>
    <img src="images/Divider-large.png" class="mt-[32px]" alt="">
    <EditForm EditContext="@editContext" OnSubmit="HandleSubmit" class="hidden">
        <DataAnnotationsValidator />
        <label class="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px] !mt-[30px]">New Password</label>
        <InputText @bind-Value="Form.NewPassword" class="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#D9D9D9] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none" />
        <label class="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px] !mt-[30px]">New Password</label>
        <InputText @bind-Value="Form.ConfirmPassword" class="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#D9D9D9] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none" />
        <div class="flex flex-row justify-between w-full">
            <button class="bg-[#92BA92] w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-white !bg-[#476F95]" @onclick="@(() => { Model.SwitchUI("None"); NavigationManager.NavigateTo("/Login/SelectOption");})">Back</button>
            <button class="bg-[#92BA92] w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-white @(Form.isButtonDisabled ? "cursor-not-allowed opacity-50" : "")">Update</button>
        </div>
    </EditForm>
    <FormErrors Class="@(Model.uI.UI_Errors + " !mt-[88px] xl:!mt-[35px]")" Errors="Model.errorMessages.ToArray()" />
    <div class="flex items-center !mt-[88px] xl:!mt-[50px] @(changed ? "" : "hidden")">
        <h4 class="hind-madurai-semibold !text-[32px] mb-0 mr-[20px]">Password Changed</h4>
        <img src="images/CheckMark-Icon.png" alt="">
    </div>
</article>

@code {
    [Parameter]
    public string Class { get; set;} = ""; // Placeholder for password check status
    [Parameter]
    public EventCallback<string> OnClick { get; set; } // Placeholder for password check status
    public bool changed { get; set; } = false; // Placeholder for email check status
    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "New Password is required.")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long.")]
        [RegularExpression(@"[^()*&^#$%~`/\\|]+$", ErrorMessage = "Password contains invalid characters.")]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
        public bool isButtonDisabled { get; set; } = false;
    }

    private EditContext editContext;
    public ChangePasswordModel Form { get; set; } = new ChangePasswordModel();

    protected override void OnInitialized()
    {
        Model.errorMessages.Clear();
        editContext = new EditContext(Form);
    }

    public async Task HandleSubmit()
    {

        if(Model.errorMessages.Count == 0 && !Model.errorMessages.Contains(""))
        {
            changed = true;
            Query.PostQueryAsync("https://jsonplaceholder.typicode.com/posts", JsonSerializer.Serialize(UserService.CurrentUser));
            await Task.Delay(2000); // Simulate a delay for the change
            Model.SwitchUI("None");
            NavigationManager.NavigateTo("/Login/SelectOption");
        }
        else
        {
            Model.SwitchUI("Errors");
        }
        StateHasChanged();
    }
}