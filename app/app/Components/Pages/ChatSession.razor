@page "/Dashboard/Chats/Session/{ChatID:int}"
@layout Layout.Chats
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ChatService ChatService
@using System.Text.RegularExpressions;

    <article>
        <div class="w-[450px] h-[470px] !mb-[30px] mx-auto overflow-y-auto" style="scrollbar-width: none;">
            @foreach (var message in AllMessages)
            {
                <Message MessageText="@message.body" SenderID="@message.id"/>
            }
        </div>
        <img src="images/Divider-XLarge-2.png" class="mb-[30px]" alt="">
        <div class="flex items-center">
            <InputText @bind-value="newMessage" @onclick="@(() => {hasError = false; errorMessage = string.Empty;})"
            class="@($"w-[420px] h-[50px]  lora-semibold text-[20px] text-[#fff] px-[15px] !rounded-[15px] !bg-[#525E75] focus:!border-[#476F95] focus:!text-[#fff] focus:border-[4px] focus:!scale-[1.03] !outline-none {(hasError ? "!border-[#F52D2D] !border-[4px]" : null)}")"/>
            <button class="flex items-center justify-center bg-[#D9D9D9] w-[50px] h-[50px] !ml-[10px] !rounded-[10px] hover:scale-[1.05] transition-all" @onclick="HandleSubmit">
                <img src="images/Send-Arrow-Icon.png" alt="" srcset="">
            </button>

        </div>
        <div class="flex items-center">
            <button class="bg-[#E8E8E8] w-[135px] h-[48px] !rounded-[10px] !mt-[15px] !text-[26px] montserrat-semibold hover:scale-[1.05] text-black" @onclick="@(() => CloseChat(ChatID))">Close</button>
            <p class="text-[#F52D2D] !text-[20px] hind-madurai-semibold ml-[25px] !mb-0">@errorMessage</p>
        </div>
    </article>
    <article class="flex items-end !h-[642px] mr-auto">
        <img src="images/Profile.png" class="w-[72px] h-[72px] ml-[25px] mb-[53px]" alt="">
    </article>


@code {
    [Parameter]
    public int ChatID { get; set; }
    public List<Form.Inputs> inputs = new List<Form.Inputs>(){ 
        new Form.Inputs(){ Name = "Query", Type = "text", Value = "", Placeholder="Enter a username", UniqueStyles = "", LabelUniqueStyles="!mt-0 !w-auto !hidden", Label="", isError=false },

    };


    [CascadingParameter]
    public Layout.Chats? ChatLayout { get; set; }

    public bool hasError { get; set; } = false;
    public string newMessage { get; set; } = string.Empty;
    public string errorMessage { get; set; } = string.Empty;

    public List<Message> AllMessages { get; set; } = new List<Message>();
    public class Message
    {
        public int id { get; set; }
        public string body { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var json = Query.GetQuery("https://jsonplaceholder.typicode.com/comments");
        var messages = System.Text.Json.JsonSerializer.Deserialize<List<Message>>(json) ?? new List<Message>();
        AllMessages = messages;
    }

    public void CloseChat(int chatID)
    {
        ChatLayout?.setCurrentChat(0); // Reset the selected chat
        NavigationManager.NavigateTo("/Dashboard/Chats");
        StateHasChanged(); // Refresh the UI
    }

    private void HandleSubmit()
    {
        switch (newMessage)
        {
            case null:
                return;
            case "":
                return;
            default:
                if (CheckMessage()) {
                    Console.WriteLine($"Message sent: {newMessage}");
                }
                return;
        }
    }

    public bool CheckMessage()
    {
        // Check if message contains only letters and numbers (no special characters)
        if (!Regex.IsMatch(newMessage, @"^[a-zA-Z0-9\s.,!?@#\-_:()']+$"))
        {
            newMessage = string.Empty; // Clear the message if it contains invalid characters
            errorMessage = "Invalid Characters";
            hasError = true; // Set error state
            StateHasChanged(); // Refresh the UI
            return false;
        }
        return true;
    }
}