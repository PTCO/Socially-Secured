@page "/login"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<PageHeading Heading="Login"/>
<section class="flex justify-center mt-[76px]" @onclick="@(e => Model.SwitchUI("Forgot"))">
    <Form 
        Inputs="@inputs"
        buttons="@buttons"
        FormsClass="flex flex-column items-center text-center w-[420px] ml-auto"
        LabelsClass="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px]"
        InputsClass="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#78938A] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none"
        FormName="LoginForm"
        HandleSubmit="HandleSubmit"
        ButtonTitle="Login"
        ButtonClass="bg-[#F1DDBF] w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-black"
        ButtonContainerClass="flex flex-row justify-center w-full"
        ChangeUI="@Model.SwitchUI"
    />
    <img src="images/Vertical-Divider-Large.png" alt="" class="mx-[170px] mt-[53px] h-[452px]">
    <div class="flex flex-column items-center mr-auto">
        <Forgot Class="@Model.uI.UI_Forgot" />
        <FormErrors Class="@(Model.uI.UI_Errors + " w-[300px]")" Errors="Model.errorMessages.ToArray()" hasBtn="true" btnTitle="Forgot?" btnCallback="@(() => Model.SwitchUI("Forgot"))"/>
        <Welcome Class="@(Model.uI.UI_Welcome)" Message="Login Successfull" Type="Login" />
    </div>
</section>

@code {
    
    public List<Form.Inputs> inputs = new List<Form.Inputs>(){ 
        new Form.Inputs(){ Name = "Username", Type = "text", Value = "", Placeholder="Username", UniqueStyles = "", LabelUniqueStyles="!mt-0", Label="Username", OnInput="CheckIsEmpty", isError=false },
        new Form.Inputs(){ Name = "Password", Type = "password", Value = "", Placeholder="Password", UniqueStyles = "!bg-[#525E75]", LabelUniqueStyles="!mt-0", Label="Password", OnInput="CheckIsEmpty", isError=false }
    };

    public List<Form.Buttons> buttons = new List<Form.Buttons>() {
        new Form.Buttons() { Title = "Login", UniqueStyles = "cursor-not-allowed opacity-50", Type="submit",isDisabled=false }
    };

    protected override void OnInitialized()
    {
        Model.errorMessages.Clear();
        Model.SwitchUI("Forgot");
    }
    public async Task HandleSubmit(Model Model)
    {
        var json = System.Text.Json.JsonSerializer.Serialize(Model.GetAllProperties()); // Convert the model data to JSON
        var result = Query.PostQueryAsync("https://jsonplaceholder.typicode.com/posts", json);
        if(result != null && !result.Contains("error")) {
            Model.SwitchUI("Welcome");
            await Task.Delay(3000); // Simulate a delay for the welcome message
            NavigationManager.NavigateTo("/Dashboard"); // Redirect to home page after successful login
        }
        else{
            Model.errorMessages.Add("Login failed. Please check your credentials.");
            Model.SwitchUI("Errors");
        }
        StateHasChanged();
    }
}