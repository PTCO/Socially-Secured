@using System.Text.Json;
@using System.ComponentModel.DataAnnotations;

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject Model Model
@inject Query Query
@inject UserService UserService
@page "/SignUp"

<PageTitle>Sign Up</PageTitle>
<PageHeading Heading="Sign Up"/>
<section class="flex justify-center lg:!mt-[40px] mt-[76px]">
    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmit" class="flex flex-column items-center text-center w-[420px] ml-auto">
        <DataAnnotationsValidator />
        <label class="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px]">Username</label>
        <div class="flex items-center">
            <InputText @bind-Value="Form.Username" @oninput="@((e) => {Form.isUsernameError = Model.CheckUsername(e.Value?.ToString(), GetTakenUsernames());})" class="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#78938A] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none" />
            <ErrorIcon  isError="@Form.isUsernameError" ContainerClass="w-[30px] h-[30px] !bg-[#F52D2D] rounded-[5px] !mb-[30px] xl:!mb-[20px] ml-[11.65px] animate-pulse" IconClass="text-white lora-semibold text-[26px]" />
        </div>
        <label class="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px]">Email</label>
        <div class="flex items-center">
            <InputText @bind-Value="Form.Email" @oninput="@((e) => {Form.isEmailError = Model.CheckEmail(e.Value?.ToString(), GetTakenEmails());})" class="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#476F95] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none" />
            <ErrorIcon  isError="@Form.isEmailError" ContainerClass="w-[30px] h-[30px] !bg-[#F52D2D] rounded-[5px] !mb-[30px] xl:!mb-[20px] ml-[11.65px] animate-pulse" IconClass="text-white lora-semibold text-[26px]" />
        </div>
        <label class="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px]">Password</label>
        <div class="flex items-center">
            <InputText @bind-Value="Form.Password" @oninput="@((e) => {Form.isPasswordError = Model.CheckPasswordStrength(e.Value?.ToString());})" class="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#525E75] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none" />
            <ErrorIcon  isError="@Form.isPasswordError" ContainerClass="w-[30px] h-[30px] !bg-[#F52D2D] rounded-[5px] !mb-[30px] xl:!mb-[20px] ml-[11.65px] animate-pulse" IconClass="text-white lora-semibold text-[26px]" />
        </div>
        <label class="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px]">Confirm Password</label>
        <div class="flex items-center">
            <InputText @bind-Value="Form.ConfirmPassword" @oninput="@((e) => {Form.isConfirmPasswordError = Model.CheckIsEmpty(e.Value?.ToString(), "Confirm Password", "UsernameCheck");})" class="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] bg-[#525E75] focus:!border-[#000] focus:border-[4px] focus:!bg-[#82919F] focus:!scale-[1.03] !outline-none" />
            <ErrorIcon  isError="@Form.isConfirmPasswordError" ContainerClass="w-[30px] h-[30px] !bg-[#F52D2D] rounded-[5px] !mb-[30px] xl:!mb-[20px] ml-[11.65px] animate-pulse" IconClass="text-white lora-semibold text-[26px]" />
        </div>
        <button type="submit" class="bg-[#F1DDBF] w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-black @(Form.isButtonDisabled ? "opacity-50 cursor-not-allowed" : "")" disabled="@Form.isButtonDisabled">Login</button>
    </EditForm>

    <img src="images/Vertical-Divider-Large.png" alt="" class="mx-[170px] mt-[53px] h-[452px]">
    <div class="flex flex-column items-center mr-auto">
        <UsernameCheck Class="@Model.uI.UI_UsernameCheck" status="@Model.status"/>
        <PasswordCheck Class="@Model.uI.UI_PasswordCheck" status="@Model.status" Strength="@Model.pwdStrength"/>
        <EmailCheck Class="@Model.uI.UI_EmailCheck" status="@Model.status"/>
        <FormErrors Class="@(Model.uI.UI_Errors + " w-[300px]")" Errors="Model.errorMessages.ToArray()"/>
        <Welcome Class="@(Model.uI.UI_Welcome)" Message="Sign Up Successfull" Type="SignUp" />
    </div>
</section>


@code {
    private class SignUpModel {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }
        
        [Required(ErrorMessage = "Email is required.")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }

        public bool isUsernameError {get; set; } = false;
        public bool isPasswordError {get; set; } = false;
        public bool isEmailError {get; set; } = false;
        public bool isConfirmPasswordError {get; set; } = false;
        public bool isButtonDisabled { get; set; } = true; // Initially disable the button until all fields are valid
    }

    public string data = Query.GetQuery("https://jsonplaceholder.typicode.com/users"); // Replace with your actual data source or qwery
    private EditContext editContext;
    private SignUpModel Form { get; set; } = new SignUpModel();

    protected override void OnInitialized(){
        Model.errorMessages.Clear();
        Model.SwitchUI("UsernameCheck");
        Model.uI.UI_Errors = "hidden";
        editContext = new EditContext(Form);
    }

    private List<string> GetTakenEmails()
    {
        var users = System.Text.Json.JsonSerializer.Deserialize<List<User>>(data);
        return users?.Select(user => user.email).ToList() ?? new List<string>();
    }

    private List<string> GetTakenUsernames()
    {
        var users = System.Text.Json.JsonSerializer.Deserialize<List<User>>(data);
        return users?.Select(user => user.username).ToList() ?? new List<string>();
    }
    public async Task HandleSubmit()
    {
        editContext.Validate();
        foreach(var message in editContext.GetValidationMessages())
        {
            Model.errorMessages.Add(message);
        }

        if(Model.errorMessages.Count == 0){
            var user = Query.PostQueryAsync("https://jsonplaceholder.typicode.com/posts", System.Text.Json.JsonSerializer.Serialize(Form));
            UserService.SetUser(user);
            await Task.Delay(3000); // Simulate a delay for the login process
            Model.SwitchUI("Welcome");
            NavigationManager.NavigateTo("/Dashboard");
        }
        StateHasChanged(); // Trigger a state change to update the UI
    }
}
 