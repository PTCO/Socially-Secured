@page "/Dashboard/Search"
@layout Layout.Dashboard
@rendermode InteractiveServer
@inject IJSRuntime JS

<section class="flex justify-center lg:!mt-[40px] mt-[75px]">
    <article class="flex flex-column !ml-[178px]">
        <div class="flex max-h-[50px] ">
            <Form 
                Inputs="@inputs"
                FormsClass="flex flex-column items-center text-center w-[420px] ml-auto"
                LabelsClass="lora-semibold text-[30px] text-[#000] mb-[25px] xl:!mb-[15px]"
                InputsClass="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] !bg-[#476F95] focus:!border-[#476F95] focus:!text-[#fff] focus:border-[4px] focus:!scale-[1.03] !outline-none"
                FormName="SignUpForm"
                HandleSubmit="HandleSubmit"
                ButtonTitle="Sign Up "
                ButtonClass="bg-[#F1DDBF] w-[201px] h-[60px] !rounded-[10px] !mt-[30px] xl:!mt-[20px] !text-[30px] font-semibold hover:scale-[1.05] text-black"
                ChangeUI="@Model.SwitchUI"
            />
            <button class="flex items-center justify-center !w-[50px] !h-[50px] bg-[#E8E8E8] !rounded-[4px] !ml-[10px] hover:!scale-[1.05] transition-all">
                <img src="images/Search-Icon.png" alt="">
            </button>
        </div>
        <div class="flex flex-column !mt-[30px] overflow-y-auto overflow-x-hidden max-h-[643px] overscroll-contain" style="scrollbar-width: none;">
            @if(results.Count > 0){
                @foreach ((var result, var index) in results.Select((value, i) => (value, i)))
                {
                    var colorClass = colorClasses[index % colorClasses.Count];
                        <Result 
                            Username="@result.username" 
                            NamePlateClass="@(colorClass)" 
                            ProfilePicture="@result.ProfilePicture" 
                            ChatID="@result.id" 
                            IsSelected="@(isSelected)" 
                            IsSearchResult=true
                            OnChatSelected="@(setCurrentChat)"
                        />
                }
            }
            else {
                <img src="images/No-Users-Found.png" alt="No Results Found" class="w-[365px] h-[104px] mx-auto mt-[25px]">
            }
        </div>
    </article>

    <img src="images/Vertical-Divider-Large.png" alt="" class="mx-[170px] mt-[53px] h-[452px]">
    <article class="flex flex-column mr-auto">
        <div class="flex items-center">
            <h2 class="lora-semibold !text-[40px] text-[#000] !mb-[0] mr-[20px]">Filter</h2>
            <img src="images/Search-Page-Search-Icon.png" alt="" srcset="">
        </div>
        <nav>
            <ul class="list-none p-0 m-0">
                <li>
                    <div class="flex items-center mt-[30px]">
                        <CheckBox Class="mr-[10px] hover:scale-[1.05] hover:cursor-pointer" UnCheckedColor="bg-[#E8E8E8]" CheckedColor="bg-[#92BA92]" />
                        <label class="montserrat-semibold text-[32px] text-[#000] ml-[15px]">Show Blocked Users</label>
                    </div>
                </li>
                <li>
                    <div class="flex items-center mt-[20px]">
                        <CheckBox Class="mr-[10px] hover:scale-[1.05] hover:cursor-pointer" UnCheckedColor="bg-[#E8E8E8]" CheckedColor="bg-[#92BA92]" />
                        <label class="montserrat-semibold text-[32px] text-[#000] ml-[15px]">Show Muted Users</label>
                    </div>
                </li>

            </ul>
        </nav>
    </article>
</section>

@code {
    public List<Form.Inputs> inputs = new List<Form.Inputs>(){ 
        new Form.Inputs(){ Name = "Query", Type = "text", Value = "", Placeholder="Enter a username", UniqueStyles = "", LabelUniqueStyles="!mt-0 !w-auto !hidden", Label="", isError=false },

    };
    public List<string> colorClasses = new List<string> { "bg-[#F1DDBF]", "bg-[#78938A]", "bg-[#E8E8E8]"};


    public class Result {
        public string username { get; set; }
        public string ProfilePicture { get; set; }
        public int id { get; set; }
        public bool IsSelected { get; set; }
        public string NamePlateStyle {get; set;}
    }

    public int isSelected = 0;

    public List<Result> results = new List<Result>();

    protected async override void OnInitialized()
    {
        Model.errorMessages.Clear();
        Model.SwitchUI("None");
        // Assuming Query.GetQuery returns a JSON string, use System.Text.Json to deserialize
        var json = Query.GetQuery("https://jsonplaceholder.typicode.com/users");
        results = System.Text.Json.JsonSerializer.Deserialize<List<Result>>(json) ?? new List<Result>();
    }

    public void setCurrentChat(int chatID)
    {
        isSelected = chatID;
        StateHasChanged();
    }

    public async Task HandleSubmit(Model Model)
    {
        // Simulate a query to fetch user data based on the input
        var query = Model.GetProperty("Query");
        if (!string.IsNullOrEmpty(query))
        {
            // Here you would typically call a service to get the user data
            // For demonstration, we will just simulate a successful query
            Model.errorMessages.Clear();
            Model.errorMessages.Add($"Query for '{query}' executed successfully.");
        }
        else
        {
            Model.errorMessages.Add("Please enter a valid username.");
        }

        StateHasChanged();
    }
}
