@page "/Dashboard/Search/{query?}"
@layout Layout.Dashboard
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Chat

<section class="flex justify-center lg:!mt-[40px] mt-[75px]">
    <article class="flex flex-column !ml-[178px]">
        <div class="flex max-h-[50px] ">
            <EditForm EditContext="@editContext" OnSubmit="HandleSubmit" class="flex flex-column items-center text-center w-[420px] ml-auto">
                <InputText @bind-Value="query" class="w-[420px] h-[50px]  lora-semibold !mb-[30px] xl:!mb-[20px] text-[20px] text-[#fff] px-[15px] !rounded-[15px] !bg-[#476F95] focus:!border-[#476F95] focus:!text-[#fff] focus:border-[4px] focus:!scale-[1.03] !outline-none" placeholder="Enter a username" />
            </EditForm>
            <button class="flex items-center justify-center !w-[50px] !h-[50px] bg-[#E8E8E8] !rounded-[4px] !ml-[10px] hover:!scale-[1.05] transition-all">
                <img src="images/Search-Icon.png" alt="">
            </button>
        </div>
        <div class="flex flex-column !mt-[30px] overflow-y-auto overflow-x-hidden max-h-[643px] overscroll-contain" style="scrollbar-width: none;">
            @if(Chat.Users.Count > 0){
                @foreach ((var result, var index) in Chat.Users.Select((value, i) => (value, i)))
                {
                    var colorClass = colorClasses[index % colorClasses.Count];
                        <Result 
                            Username="@result.username" 
                            NamePlateClass="@(colorClass)" 
                            ProfilePicture="@result.ProfilePicture" 
                            ChatID="@result.id" 
                            IsSelected="@(isSelected)" 
                            IsSearchResult=true
                            OnChatSelected="@(setCurrentChat)"
                        />
                }
            }
            else {
                <img src="images/No-Users-Found.png" alt="No Results Found" class="w-[365px] h-[104px] mx-auto mt-[25px]">
            }
        </div>
    </article>

    <img src="images/Vertical-Divider-Large.png" alt="" class="mx-[170px] mt-[53px] h-[452px]">
    <article class="flex flex-column mr-auto">
        <div class="flex items-center">
            <h2 class="lora-semibold !text-[40px] text-[#000] !mb-[0] mr-[20px]">Filter</h2>
            <img src="images/Search-Page-Search-Icon.png" alt="" srcset="">
        </div>
        <nav>
            <ul class="list-none p-0 m-0">
                <li>
                    <div class="flex items-center mt-[30px]">
                        <CheckBox Class="mr-[10px] hover:scale-[1.05] hover:cursor-pointer" UnCheckedColor="bg-[#E8E8E8]" CheckedColor="bg-[#92BA92]" />
                        <label class="montserrat-semibold text-[32px] text-[#000] ml-[15px]">Show Blocked Users</label>
                    </div>
                </li>
                <li>
                    <div class="flex items-center mt-[20px]">
                        <CheckBox Class="mr-[10px] hover:scale-[1.05] hover:cursor-pointer" UnCheckedColor="bg-[#E8E8E8]" CheckedColor="bg-[#92BA92]" />
                        <label class="montserrat-semibold text-[32px] text-[#000] ml-[15px]">Show Muted Users</label>
                    </div>
                </li>

            </ul>
        </nav>
    </article>
</section>

@code {
    [Parameter]
    public string? query { get; set; }

    public List<string> colorClasses = new List<string> { "bg-[#F1DDBF]", "bg-[#78938A]  !text-[#fff]", "bg-[#E8E8E8]", "bg-[#476F95] !text-[#fff]"};
    public int isSelected = 0;
    private EditContext editContext = new EditContext(new { });

    protected async override void OnInitialized()
    {
        Model.errorMessages.Clear();
        Model.SwitchUI("None");
        // Assuming Query.GetQuery returns a JSON string, use System.Text.Json to deserialize
        var json = Query.GetQuery("https://jsonplaceholder.typicode.com/users");
        Chat.Users = System.Text.Json.JsonSerializer.Deserialize<List<Chat.ChatUser>>(json) ?? new List<Chat.ChatUser>();
    }

    public void setCurrentChat(int chatID)
    {
        isSelected = chatID;
        StateHasChanged();
    }

    public async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(query))
        {
            Model.errorMessages.Clear();
            Model.errorMessages.Add($"Query for '{query}' executed successfully.");
        }
        else
        {
            Model.errorMessages.Add("Please enter a valid username.");
        }

        StateHasChanged();
    }
}
